class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """


        if len(board) ==0 or len(board[0])== 0:
            return False
        
        from collections import Counter
        # corner case: word not in the board
        board_count = Counter(char for row in board for char in row)
        word_count = Counter(word)
        if any(word_count[char] > board_count.get(char, 0) for char in word_count):
            return False
        
        visited = [[False] * len(board[0]) for _ in range(len(board))]

        for r in range(len(board)):
            for c in range(len(board[0])):
                if self.dfs(board, word, 0, r, c, visited):
                    return True
        return False

    def dfs(self, board, word, index, r, c, visited):
        if index == len(word):
            return True
        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]) or visited[r][c] or board[r][c] != word[index]:
            return False
        
        visited[r][c] = True
        dx = [0, 0, -1, 1] # left, right, up, down
        dy = [-1, 1, 0, 0]
        for idx in range(len(dx)):
            if self.dfs(board, word, index+1, r+dx[idx], c+dy[idx], visited):
                return True
        visited[r][c] = False # backtracking
        return False   
    
        
