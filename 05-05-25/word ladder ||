from collections import defaultdict, deque
class Solution(object):
    def findLadders(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """
        wordSet = set(wordList)
        if endWord not in wordSet:
            return []
        
        parents = defaultdict(set)
        level = {beginWord}
        found = False
        
        while level and not found:
            next_level = defaultdict(set)
            for word in level:
                wordSet.discard(word)
            
            for word in level:
                for i in range(len(word)):
                    for c in 'abcdefghijklmnopqrstuvwxyz':
                        new_word = word[:i] + c + word[i+1:]
                        if new_word in wordSet:
                            next_level[new_word].add(word)
                            if new_word == endWord:
                                found = True
            
            level = next_level
            parents.update(next_level)
        
        if not found:
            return []
        
        res = []
        def backtrack(word, path):
            if word == beginWord:
                res.append(path[::-1])
                return
            for parent in parents[word]:
                backtrack(parent, path + [parent])
        
        backtrack(endWord, [endWord])
        return res
